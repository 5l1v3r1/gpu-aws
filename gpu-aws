#!/bin/bash

SECURITY_GROUP=unixpickle-gpu-aws

subcommand_help() {
  echo 'Usage: gpu-aws <command> [args... | help]'
  echo
  echo 'Available commands:'
  echo ' create  <sess_dir> <instance_type> <AMI>'
  echo ' destory <sess_dir>'
  echo ' setup   (pipe into ssh command)'
  echo ' ssh     <sess_dir> <user>'
  echo ' push    <sess_dir> <user> <local_file> <remote_file>'
  echo ' pull    <sess_dir> <user> <remote_file> <local_file>'
  echo ' help'
  echo
  echo 'All commands store temporary data in a "session directory".'
}

subcommand_create() {
  sessdir="$1"
  insttype="$2"
  ami="$3"
  if [ -d "$sessdir" ]; then
    echo "session directory already exists: $sessdir" >&2
    exit 1
  fi
  mkdir "$sessdir" || exit 1

  uuid=$(echo $RANDOM $(date) | openssl md5)
  echo $uuid >"$sessdir/uuid" || exit 1

  echo 'Creating key pair...'
  aws ec2 create-key-pair \
    --key-name ${uuid}key \
    --output text \
    --query 'KeyMaterial' >"$sessdir/key.pem" \
    || exit 1
  chmod 600 "$sessdir/key.pem"

  echo 'Checking security group...'
  aws ec2 describe-security-groups \
    --group-names "$SECURITY_GROUP" \
    --query 'SecurityGroups[0].GroupId' \
    --output text \
    >"$sessdir/groupid" \
    2>/dev/null

  if [ $? -eq 0 ]; then
    echo 'Security group already exists.'
  else
    echo 'Creating security group...'
    aws ec2 create-security-group \
      --group-name "$SECURITY_GROUP" \
      --description 'gpu-aws group' \
      --query 'GroupId' \
      --output text \
      >"$sessdir/groupid" \
      || exit 1
    aws ec2 authorize-security-group-ingress \
      --group-name "$SECURITY_GROUP" \
      --protocol tcp \
      --port 22 \
      --cidr 0.0.0.0/0 \
      || exit 1
  fi

  echo "Creating $insttype from AMI $ami..."
  aws ec2 run-instances \
    --image-id "$ami" \
    --security-group-ids $(cat "$sessdir/groupid") \
    --count 1 \
    --instance-type "$insttype" \
    --key-name ${uuid}key \
    --query 'Instances[0].InstanceId' \
    --output text \
    >"$sessdir/instid" \
    || exit 1

  echo 'Getting instance IP...'
  aws ec2 describe-instances \
    --instance-ids $(cat "$sessdir/instid") \
    --query 'Reservations[0].Instances[0].PublicIpAddress' \
    --output text \
    >"$sessdir/ip" \
    || exit 1
  echo "IP: $(cat "$sessdir/ip")"
}

subcommand_destroy() {
  sessdir="$1"
  check_sess_dir "$sessdir"

  uuid=$(cat "$sessdir/uuid")

  echo 'Deleting instance...'
  aws ec2 terminate-instances --instance-ids $(cat "$sessdir/instid")

  echo 'Deleting key pair...'
  aws ec2 delete-key-pair --key-name ${uuid}key
}

subcommand_setup() {
  godl=$(curl -s https://golang.org/dl/ |
    grep -e 'go.*\.linux-amd64\.tar\.gz' |
    head -n 1 |
    sed -E 's/^.*"(.*)".*$/\1/g')
  if [ "$godl" = '' ]; then
    echo 'failed to get URL' >&2
    exit 1
  fi

  cat << EOF
    cd ~
    if [ ! -f .gpu_aws_setup_done ]; then
      sudo yum -y install git curl || sudo apt-get -y install git curl
      curl $godl >go.tar.gz
      tar xf go.tar.gz
      mkdir gopath
      mkdir gopath/bin
      mkdir gopath/src
      echo 'export GOPATH=~/gopath' >>~/.bash_profile
      echo 'export GOROOT=~/go' >>~/.bash_profile
      echo 'export PATH=\$PATH:~/go/bin:~/gopath/bin' >>~/.bash_profile
      touch .gpu_aws_setup_done
    fi
EOF
}

subcommand_ssh() {
  sessdir="$1"
  username="$2"
  check_sess_dir "$sessdir"
  ip=$(cat "$sessdir/ip")
  ssh -oStrictHostKeyChecking=no -i "$sessdir/key.pem" "$username@$ip"
}

subcommand_push() {
  sessdir="$1"
  username="$2"
  local_file="$3"
  remote_file="$4"
  check_sess_dir "$sessdir"
  ip=$(cat "$sessdir/ip")
  scp -r -oStrictHostKeyChecking=no -i "$sessdir/key.pem" \
    "$local_file" "$username@$ip:$remote_file"
}

subcommand_pull() {
  sessdir="$1"
  username="$2"
  remote_file="$3"
  local_file="$4"
  check_sess_dir "$sessdir"
  ip=$(cat "$sessdir/ip")
  scp -r -oStrictHostKeyChecking=no -i "$sessdir/key.pem" \
    "$username@$ip:$remote_file" "$local_file"
}

if [ $# -lt 1 ]; then
  subcommand_help >&2
  exit 1
fi

bad_arg_count() {
  echo 'bad argument count' >&2
  echo 'see `gpu-aws help`' >&2
  exit 1
}

check_sess_dir() {
  if [ ! -d "$1" ]; then
    echo "no session directory: $1" >&2
    exit 1
  fi
}

if [ "$1" = create ]; then
  if [ $# -eq 4 ]; then
    subcommand_create "$2" "$3" "$4"
  else
    bad_arg_count
  fi
elif [ "$1" = destroy ]; then
  if [ $# -eq 2 ]; then
    subcommand_destroy "$2"
  else
    bad_arg_count
  fi
elif [ "$1" = setup ]; then
  subcommand_setup
elif [ "$1" = ssh ]; then
  if [ $# -eq 3 ]; then
    subcommand_ssh "$2" "$3"
  else
    bad_arg_count
  fi
elif [ "$1" = push ] || [ "$1" = pull ]; then
  if [ $# -eq 5 ]; then
    subcommand_$1 "$2" "$3" "$4" "$5"
  else
    bad_arg_count
  fi
elif [ "$1" = help ]; then
  subcommand_help
else
  echo 'unknown command:' "$1" >&2
  echo 'see `gpu-aws help`.' >&2
  exit 1
fi
